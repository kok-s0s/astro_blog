[
  {
    "title": "《算法图解》语句摘抄",
    "li_texts": [
      "算法是完成一项任务的一系列步骤。",
      "任何代码片段都可视为算法。",
      "对数运算是幂运算的逆运算。",
      "算法的运行时间以不同的速度增加",
      "大 O 表示法指的并非以秒为单位的速度，大 O 表示法让你能够比较操作数，它指出了算法运行时间的增速。",
      "算法的速度指的并非时间。而是操作数的增速。",
      "谈论算法的速度时，说的是随着输入的增加，其运行时间将以什么样的速度增加。",
      "感谢生活中使我们赏心悦目的一切事物。",
      "职业技能的提升非一日之功，静下来，慢下来，试着实践一些，总结一些，如此反复。",
      "解答得不够完美是没有问题的。",
      "即使从学生时代起，你的面试官其实都没怎么接触过所谓的红黑树算法。",
      "常写代码，以防手生。",
      "任何项目，最重要的是，你确实参与了开发。",
      "行动是关键。",
      "O(1)是相对文件大小而言。尽管文件变大，但它把文件送到你朋友那儿所用的时间不变。传输时间是个常量。",
      "需要将数据存储到内存时，请求计算机提供存储空间，计算机给出一个存储地址。",
      "当需要在中间插入元素时，链表是更好的选择。",
      "伪代码是对手头问题的简要描述，看着像代码，但其实更接近自然语言。",
      "递归只是让解决方案更清晰，并无性能上的优势。",
      "如果使用循环，程序的性能可能更好；如果使用递归，程序可能更容易理解。如何选择要看什么对你来说更重要。",
      "每个递归函数都有两部分：基线条件（base case）和递归条件（recursive case）。递归条件指的是函数调用自己，而基线条件则指的是函数不再调用自己，从而避免形成无限循环。",
      "计算机在内部使用被称为调用栈的栈。",
      "栈在递归中扮演着重要角色。",
      "使用栈虽然很方便，但是也要付出代价：存储详尽的信息可能占用大量的内存。每个函数调用都要占用一定的内存，如果栈很高，就意味着计算机存储了大量函数调用的信息。在这种情况下，你有两种选择：重新编写代码，转而使用循环；或者使用尾递归。",
      "分而治之（divide and conquer）是一种著名的递归式问题解决方法。",
      "编写涉及数组的递归函数时，基线条件通常是数组为空或只包含一个元素。陷入困境时，请检查基线条件是否符合这些条件。",
      "散列表适合用于模拟映射关系、防止重复数据出现以及缓存数据（例如，在网站的内存中存储数据，以便快速地获取这些数据）。",
      "迪克斯特拉算法只适用于有向无环图（directed acyclic graph，DAG），且仅当权重为正才可。",
      "贪婪算法：每步都采取最优的做法。即每步都选择局部最优解，最终得到的就是全局最优解。",
      "完美是优秀的敌人。",
      "NP 完全问题的简单定义是，以难解著称的问题。",
      "NP 完全问题无处不在！如果能够判断出要解决的问题属于 NP 完全问题就好了，这样就不用去寻找完美的解决方案，而是使用近似算法即可。",
      "涉及 “所有组合” 的问题通常是 NP 完全问题。",
      "动态规划先解决子问题，再逐步解决大问题。",
      "动态规划功能强大，它能够解决子问题并使用这些答案来解决大问题。但仅当每个子问题都是离散的，即不依赖于其它子问题时，动态规划才管用。",
      "生物学家根据最长公共序列来确定 DNA 链的相似性，进而判断两种动物或疾病有多相似。最长公共序列还被用来寻找多发性硬化症治疗方案。",
      "git diff 命令使用动态规划来指出两个文件的差异。Microsoft Excel 使用动态规划来实现断字功能。",
      "没有放之四海而皆准的计算动态规划解决方案的公式。你必须根据问题的特点，自己设计解决方案。"
    ]
  },
  {
    "title": "《活文档-与代码共同演进》语句摘抄",
    "li_texts": [
      "未来已来，只是分布不均。",
      "编写文档是一个时间陷阱。",
      "增强代码 = 代码 + 注释。",
      "信息太多等于没有信息。",
      "代码必须能够供人们阅读，偶尔可以供计算机执行。",
      "在设计时，搜索正确的词是对时间的有效利用。",
      "如果你无法改变一个决策，那它就是一个需求。如果你能改变，它就是你的设计。",
      "文档只是一种手段，不是目的，也不是产品。",
      "进行对话比记录对话更重要，比使对话自动化更重要。",
      "一次电话可以省二十封邮件，一次面对面聊天可以省二十次电话。",
      "同一件事不要做两次。如果已经做了，那么是时候自动化了。",
      "代码库中的一致性是指你从没讲过的代码看起来很熟悉，而且你可以轻松地处理它。",
      "并不会因为有文档就能显得没那么愚蠢。",
      "遗留应用程序就是知识化石。",
      "使用文档获取专门知识，并通过培训学习通用知识。",
      "知识定位问题、知识稳定性问题。",
      "如果要让一个活动一直发展下去，就让它变得有趣吧。",
      "乐趣始于琐事自动化。",
      "大多数知识已经存在。只需要用缺失的上下文、意图和原理来扩充它即可。",
      "控制了词汇的人就控制了思想。",
      "在软件行业，每次标准词汇量增加，行业都会取得进步。",
      "设计模式是经验丰富的程序员的交流工具，而不是初学者训练用的辅助轮或脚手架。",
      "你还是要思考，但是不需要独自思考。"
    ]
  },
  {
    "title": "个人实际编程工作的体会",
    "li_texts": [
      "校招入职的导师对我曾说过，商业代码绝大多数没有什么特别难的点，关键做事要靠谱，有问有答，这一句话这三年工作也真是深有体会。",
      "对待问题不要过度猜测，有源码能编译，那就 Run，Test 不断循环，直至该问题被解决。",
      "想快速入手一个领域的知识点，最好的方式就是先做一个小玩意出来，再逐渐完善它，最忌讳的是想得多做得少，代码这东西，并不是阅读得多就能入脑的。",
      "健康很重要，每日 8 杯水不指望，但是一定要多喝水！"
    ]
  }
]
