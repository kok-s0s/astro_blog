---
import BaseLayout from '../layouts/Base.astro'
import One from './cxx_roadmap/one.astro'
import Two from './cxx_roadmap/two.astro'
import Three from './cxx_roadmap/three.astro'
import Four from './cxx_roadmap/four.astro'
import Five from './cxx_roadmap/five.astro'
import '../styles/roadmap.css'

const pageTitle = '程序员这条路'
---

<BaseLayout pageTitle={pageTitle}>
  <h2>C/C++ Roadmap</h2>
  <One />
  <Two />
  <Three />
  <Four />
  <Five />
  <blockquote>
    <p>
      <a href="https://github.com/salmer/CppDeveloperRoadmap" target="_blank" class="underline">CppDeveloperRoadmap</a>
    </p>
    <p>
      <span class="junior">Junior</span>
      <span class="middle">Middle</span>
      <span class="senior">Senior</span>
      <span class="optional">Optional</span>
    </p>
  </blockquote>
  <hr />
  <h2>架构</h2>
  <p>目前接触到的</p>
  <h3>MVC</h3>
  <blockquote><p>多用于构建 PC 上的应用软件</p></blockquote>
  <ul class="architecture">
    <li>
      在模型（Model）层，通常会使用单例模式创建唯一的对象，这些对象存储应用程序的数据并提供相应的Get/Set方法供其他组件使用。这确保了数据的一致性和可维护性。
    </li>
    <li>
      在控制器（Controller）层，控制器将模型层的对象进行封装，以便向视图层提供一组符合视图需求的接口。这有助于解耦模型和视图，使系统更加灵活和可扩展。
    </li>
    <li>
      同时，使用观察者模式可以实现模型层和视图层之间的松耦合。当模型层的对象发生变化时，通知已注册的观察者（视图层），从而触发相应的更新操作，确保视图与数据的同步。
    </li>
    <li>
      在视图（View）层，可以通过从控制器获取对象，并使用其提供的Set方法来更新模型层的数据。这种方式确保了用户界面的及时响应和与底层数据的一致性。
    </li>
    <li>此外会在视图层构建定时器，定时器的使用可以确保视图层定期获取最新的模型数据，增强用户体验和界面的实时性。</li>
  </ul>
  <h3>MVVM</h3>
  <blockquote><p>用各种框架构建 Web 页面会用到</p></blockquote>
  <ul class="architecture">
    <li>但其实用框架，就看文档开发罢了，不会深究其中的 MVVM 架构是如何运作。</li>
  </ul>
</BaseLayout>
