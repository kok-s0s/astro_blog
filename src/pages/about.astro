---
import BaseLayout from '../layouts/BaseLayout.astro'

const pageTitle = '关于'

const selfInfo = [
  '在程序开发，更喜欢给自己制定一个目标来驱动自己逐步完成它',
  '并没有特别讨厌或者很喜欢的语言，在过往一年中，最常用的是 C/C++。现在对于各种语言的态度，更多是看要去解决什么样的问题，以及有多少时间去解决这个问题，根据这两点去选择合适的语言来解决问题',
  '有点喜欢 Python 和 Shell 语言，能在工作中节省些许时间',
  '离不开 Code Format',
  '团队开发最喜欢 Code Review 环节',
]
const skills = ['英语', '网络搜索技巧', '文档阅读能力', '调试', '会和 ChatGPT 聊天 /doge', '能将业务需求翻译成技术需求']
---

<BaseLayout pageTitle={pageTitle}>
  <p>他的一些信息：</p>
  <ul>
    {selfInfo.map((info) => <li class="textGap">{info}</li>)}
  </ul>
  <p>他认为程序员要熟练的<a href="/roadmap" id="normal">能力</a>：</p>
  <ul>
    {skills.map((skill) => <li class="skill textGap">{skill}</li>)}
  </ul>
  <p>他做过的一些 <em>Repository</em>：</p>
  <ul>
    <li>
      <a href="https://github.com/kok-s0s/cxx_crud_file" target="_blank" class="underline">
        <em>cxx_crud_file</em>
      </a>
      -
      <a href="/posts/cxx_crud_file">
        <em>记一次「 包轮子 」的经历</em>
      </a>
      <p class="textGap">
        以剔除 Qt 代码（读写功能和数据结构）为目标而诞生的项目。用 UString 替换掉 QString 类型，用 filesystem 库编写个
        UFile 基类，基于它衍生出 JsonFile、IniFile 来替换掉 Qt 的 QJson 和 QSetting 类；用衍生出的 BinFile、TxtFile 和
        BmpFile 来处理二进制文件、文本文件和 bmp 文件。
      </p>
    </li>
    <li>
      <a href="https://github.com/kok-s0s/cxx_thread" target="_blank" class="underline">
        <em>cxx_thread</em>
      </a>
      -
      <a href="/posts/cxx_thread">
        <em>造个 C++ 线程基类</em>
      </a>
      <p class="textGap">
        以剔除 Qt 的 QThread 为目标而诞生的项目。设计的线程基类能搭配类似 Qt 中的信号与槽机制来使用，且利用现代 C++
        提供的互斥量和条件变量，让函数能够同步或异步运行，这样派生类（某业务工作线程）能持有定时器（线程）来做些定时任务（异步）。
      </p>
    </li>
    <li>
      <a href="https://github.com/kok-s0s/flutter_ffi_opencv" target="_blank" class="underline">
        <em>flutter_ffi_opencv</em>
      </a>
      <p>
        使用 flutter 生态的 FFI 库，可以轻松地将 Dart 代码与现有的 C/C++ 库进行交互，无需编写任何桥接代码，制成 flutter
        生态下的一个插件，这样 flutter 应用就能接入用 C/C++ 所编写的功能模块。
      </p>
    </li>
    <li>
      <a href="https://github.com/kok-s0s/socket_qt_dotNet" target="_blank" class="underline">
        <em>socket_qt_dotNet</em>
      </a>
      <p class="textGap">使用 Socket 通信技术，实现 Qt 应用和 C# 应用的通信。</p>
    </li>
  </ul>
  <p>他做过的一些 <em>Lecture</em></p>
  <ul>
    <li>
      <a href="https://qt-linux-dev.netlify.app" target="_blank" class="underline">
        <em>Qt Linux Dev</em>
      </a>
    </li>
    <li>
      <a href="https://vscode-cmake-cxx-tdd.netlify.app" target="_blank" class="underline">
        <em>VSCode CMake C++ TDD</em>
      </a>
    </li>
  </ul>
  <details>
    <summary>他近一年阅览过的书籍：</summary>
    <ul>
      <li class="book textGap"><s><b>活文档</b> 与代码共同演进</s> 浅读</li>
      <li class="book textGap"><s><b>重构</b> 改善既有代码的设计</s> Done</li>
      <li class="book textGap"><s>Clean C++</s> Done</li>
      <li class="book textGap"><s>Linux Shell 脚本攻略</s> 看一半弃了，用 ChatGPT 生成脚本嘎嘎香！</li>
    </ul>
  </details>
</BaseLayout>

<style>
  p {
    margin-block-start: 0.3rem;
    margin-block-end: 0.3rem;
  }

  hr {
    border: none;
  }

  summary::marker {
    content: '';
  }

  summary:after {
    content: '+';
    float: left;
    font-size: 1em;
    font-weight: bold;
    margin: -2px 10px 0 0;
    padding: 1px 0 3px 0;
    text-align: center;
    width: 14px;
  }

  details[open] summary:after {
    content: '-';
  }

  .textGap {
    line-height: 1.6;
  }

  .skill,
  .book {
    letter-spacing: 1px;
  }

  #tech-books {
    width: 100%;
    max-width: 700px;
    margin: 0 auto;
    display: block;
  }
</style>
