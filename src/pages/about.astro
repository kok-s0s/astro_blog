---
import BaseLayout from '../layouts/BaseLayout.astro'

const pageTitle = '关于'

const selfInfo = [
  '在程序开发，更喜欢给自己制定一个目标来驱动自己逐步完成它',
  '并没有特别讨厌或者很喜欢的语言，在过往一年中，最常用的是 C/C++。现在对于各种语言的态度，更多是看要去解决什么样的问题，以及有多少时间去解决这个问题，根据这两点去选择合适的语言来解决问题',
  '有点喜欢 Python 和 Shell 语言，能在工作中节省些许时间',
  '离不开 Code Format',
  '团队开发最喜欢 Code Review 环节',
]
const skills = ['英语', '网络搜索技巧', '文档阅读能力', '调试', '会和 ChatGPT 聊天 /doge', '能将业务需求翻译成技术需求']

const repos = [
  {
    name: 'terminal tools',
    link: 'https://repos-kok-s0s.netlify.app/',
    description:
      '为自己做的一些终端下使用的工具，并无太多技术含量。不过为自己做的小工具，能帮助我自己提高处理事情的效率，还蛮有点成就感的。此外，常写代码，以防手生。',
  },
  {
    name: 'cxx_crud_file',
    link: 'https://github.com/kok-s0s/cxx_crud_file',
    description: `以剔除 Qt 代码（读写功能和数据结构）为目标而诞生的项目。用 UString 替换掉 QString 类型，用 filesystem 库编写个
      UFile 基类，基于它衍生出 JsonFile、IniFile 来替换掉 Qt 的 QJson 和 QSetting 类；用衍生出的 BinFile、TxtFile 和
      BmpFile 来处理二进制文件、文本文件和 bmp 文件。`,
  },
  {
    name: 'cxx_thread',
    link: 'https://github.com/kok-s0s/cxx_thread',
    description: `以剔除 Qt 的 QThread 为目标而诞生的项目。设计的线程基类能搭配类似 Qt 中的信号与槽机制来使用，且利用现代 C++
      提供的互斥量和条件变量，让函数能够同步或异步运行，这样派生类（某业务工作线程）能持有定时器（线程）来做些定时任务（异步）。`,
  },
  {
    name: 'flutter_ffi_opencv',
    link: 'https://github.com/kok-s0s/flutter_ffi_opencv',
    description: `使用 flutter 生态的 FFI 库，可以轻松地将 Dart 代码与现有的 C/C++ 库进行交互，无需编写任何桥接代码，制成 flutter
      生态下的一个插件，这样 flutter 应用就能接入用 C/C++ 所编写的功能模块。`,
  },
  {
    name: 'socket_qt_dotNet',
    link: 'https://github.com/kok-s0s/socket_qt_dotNet',
    description: `使用 Socket 通信技术，实现 Qt 应用和 C# 应用的通信。`,
  },
]

const booksRead = [
  { name: '活文档 与代码共同演进', status: '浅读' },
  { name: '重构 改善既有代码的设计', status: 'Done' },
  { name: 'Clean C++', status: 'Done' },
  { name: 'Linux Shell 脚本攻略', status: '看一半弃了，用 ChatGPT 生成脚本嘎嘎香！' },
]
---

<BaseLayout pageTitle={pageTitle}>
  <p>他的一些信息：</p>
  <ul>
    {selfInfo.map((info) => <li>{info}</li>)}
  </ul>
  <p>他认为程序员要熟练的<a href="/roadmap" id="normal">能力</a>：</p>
  <ul>
    {skills.map((skill) => <li>{skill}</li>)}
  </ul>
  <p>他做过的一些 <em>Repository</em> ：</p>
  <ul id="repos">
    {
      repos.map((repo) => (
        <li class="none-style">
          <details>
            <summary>
              <a href={repo.link} class="underline">
                <em>{repo.name}</em>
              </a>
            </summary>
            <p>{repo.description}</p>
          </details>
        </li>
      ))
    }
  </ul>
  <details>
    <summary>他近一年阅览过的书籍：</summary>
    <ul>
      {
        booksRead.map((book) => (
          <li>
            <s>{book.name}</s> _ <span>{book.status}</span>
          </li>
        ))
      }
    </ul>
  </details>
</BaseLayout>

<style>
  #repos {
    margin-left: -1rem;
  }

  ul li.none-style {
    list-style: none;
  }

  summary {
    cursor: pointer;
  }

  details > summary {
    list-style: none;
  }

  summary:after {
    content: '+';
    float: left;
    font-size: 1em;
    font-weight: bold;
    margin: -2px 10px 0 0;
    padding: 1px 0 3px 0;
    text-align: center;
    width: 14px;
  }

  details[open] summary:after {
    content: '-';
  }
</style>

<script>
  const reposList = document.getElementById('repos')
  const detailsElements = reposList.getElementsByTagName('details')

  for (const details of detailsElements) {
    details.addEventListener('click', () => {
      for (const otherDetails of detailsElements) {
        if (otherDetails !== details) {
          otherDetails.removeAttribute('open')
        }
      }
    })
  }
</script>
